import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { billGet, billRegister, updateStatusBill } from './billAPI';

const initialState = {
  value: [],
  status: 'idle',
  registered: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getbillAsync = createAsyncThunk(
  'bill/billGet',
  async (jwt) => {

    const response = await billGet(jwt);
    console.log("response", response)
    return response;
  }
);

export const registerBillAsync = createAsyncThunk(
  'bill/billRegister',
  async (bill) => {

    const response = await billRegister(bill);
    console.log("response", response);
    return response;
  }
);

export const updateStatusBillAsync = createAsyncThunk(
  'bill/updateStatusBill',
  async (bill) => {
    const response = await updateStatusBill(bill);
    console.log("response", response);
    return response;
  }
);

export const billSlice = createSlice({
  name: 'bill',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
    setValues: (state) =>{
      state.registered = null;
    } 
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getbillAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getbillAsync.fulfilled, (state, action) => {
        state.status = 'idle';

        if (action.payload.error) {
          console.log("error", action.payload.error)
        } else {
          state.value = action.payload;
          console.log("paylod", action.payload)
        }
      })
      
      .addCase(updateStatusBillAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateStatusBillAsync.fulfilled, (state, action) => {

        state.status = 'idle';
        console.log('action', action.payload)
        for (let i = 0; i < state.value.length; i++) {

          if (state.value[i].id == action.payload.id){

            state.value[i] = action.payload

          }
        }

      })

      .addCase(registerBillAsync.pending, (state) => {
        state.status = 'loading';
      })
        .addCase(registerBillAsync.rejected, (state) => {
            state.status = 'idle';
        })
        .addCase(registerBillAsync.fulfilled, (state, action) => {
            
            state.status = 'idle';

            if (action.payload.error) {
              console.log("error", action.payload.error)
              state.registered = false;
            }else{
              // state.value = action.payload;
              console.log("paylod", action.payload)
              state.registered = true;
            }
      })
  },
});

export const { setValues } = billSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectBill = (state) => state.bill.value;

export const selectBillRegistered = (state) => state.bill.registered;

export const selectBillStatus = (state) => state.bill.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default billSlice.reducer;

