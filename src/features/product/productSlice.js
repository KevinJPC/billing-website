import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchGetProducts, fetchGetProductsByQuery } from './productAPI';

const initialState = {
  value: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getProductsAsync = createAsyncThunk(
  'product/fetchGetProducts',
  async () => {
    const response = await fetchGetProducts();
    console.log("response get products", response)
    // The value we return becomes the `fulfilled` action payload
    return response;


  }
);

export const getProductsByQueryAsync = createAsyncThunk(
  'product/fetchGetProductsByQuery',
  async (query) => {
    const response = await fetchGetProductsByQuery(query);
    console.log("response get products by query", response)
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const productSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    removeProducts: (state) => {
      state.value = []
      state.status = 'idle'
    }
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      ////////////////////////////////////////////////////////////////
      //getProductsAsync
      .addCase(getProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
      
        if (action.payload.error) {
          console.log("error", action.payload.error)
        }else{
          state.value = action.payload;
          console.log("paylod", action.payload)
        }
        
      })
      ///////////////////////////////////////////////////////////////
      //getProductsByQueryAsync
      .addCase(getProductsByQueryAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getProductsByQueryAsync.fulfilled, (state, action) => {
        state.status = 'idle';

        if(action.payload.error){
          console.log("error", action.payload.error)
        }else{
          console.log("paylod", action.payload)
          state.value = action.payload;
        }

      });
  },
});

export const { removeProducts } = productSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProduct = (state) => state.product.value;

export const selectProductStatus = (state) => state.product.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default productSlice.reducer;
